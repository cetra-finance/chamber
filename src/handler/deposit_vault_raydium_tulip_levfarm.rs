use crate::{state, utils};
use anchor_lang::{prelude::*, solana_program::program::invoke_signed};
use anchor_spl::token::Token;
use tulipv2_sdk_levfarm::instructions::deposit_raydium_vault::{deposit_vault, DepositFarm};

pub struct DepositVaultRaydiumTulipLevfarmAccounts<'c, 'info> {
    pub chamber: &'c Account<'info, state::Chamber>,
    pub chamber_authority: &'c AccountInfo<'info>,
    pub chamber_farm: &'c AccountInfo<'info>,
    pub chamber_farm_obligation_vault: &'c AccountInfo<'info>,
    pub leveraged_farm: &'c AccountInfo<'info>,
    pub vault_program: &'c AccountInfo<'info>,
    pub authority_token_account: &'c AccountInfo<'info>,
    pub vault_pda_account: &'c AccountInfo<'info>,
    pub vault: &'c AccountInfo<'info>,
    pub lp_token_account: &'c AccountInfo<'info>,
    pub chamber_balance_account: &'c AccountInfo<'info>,
    pub system_program: &'c Program<'info, System>,
    pub stake_program: &'c AccountInfo<'info>,
    pub pool_id: &'c AccountInfo<'info>,
    pub pool_authority: &'c AccountInfo<'info>,
    pub vault_info_account: &'c AccountInfo<'info>,
    pub pool_lp_token_account: &'c AccountInfo<'info>,
    pub reward_a_token_account: &'c AccountInfo<'info>,
    pub pool_reward_a_token_account: &'c AccountInfo<'info>,
    pub reward_b_token_account: &'c AccountInfo<'info>,
    pub pool_reward_b_token_account: &'c AccountInfo<'info>,
    pub clock_sysvar: &'c Sysvar<'info, Clock>,
    pub rent_sysvar: &'c Sysvar<'info, Rent>,
    pub token_program_id: &'c Program<'info, Token>,
    pub chamber_balance_metadata: &'c AccountInfo<'info>,
    pub lending_market: &'c AccountInfo<'info>,
    pub chamber_farm_obligation: &'c AccountInfo<'info>,
    pub lending_market_authority: &'c AccountInfo<'info>,
    pub lending_program: &'c AccountInfo<'info>,
    pub levfarm_program: &'c AccountInfo<'info>,
}

#[inline(always)]
pub fn deposit_vault_raydium_tulip_levfarm<'c, 'info>(
    accounts: Box<DepositVaultRaydiumTulipLevfarmAccounts>,
    nonce: u8,
    meta_nonce: u8,
    obligation_index: u8,
) -> Result<()> {
    invoke_signed(
        &deposit_vault(
            Box::new(DepositFarm {
                authority: accounts.chamber_authority.key(),
                user_farm: accounts.chamber_farm.key(),
                obligation_vault_address: accounts.chamber_farm_obligation_vault.key(),
                leveraged_farm: accounts.leveraged_farm.key(),
                vault_program: accounts.vault_program.key(),
                authority_token_account: accounts.authority_token_account.key(),
                vault_pda_account: accounts.vault_pda_account.key(),
                vault: accounts.vault.key(),
                lp_token_account: accounts.lp_token_account.key(),
                user_balance_account: accounts.chamber_balance_account.key(),
                system_program: accounts.system_program.key(),
                stake_program_id: accounts.stake_program.key(),
                pool_id: accounts.pool_id.key(),
                pool_authority: accounts.pool_authority.key(),
                vault_info_account: accounts.vault_info_account.key(),
                pool_lp_token_account: accounts.pool_lp_token_account.key(),
                user_reward_a_token_account: accounts.reward_a_token_account.key(),
                pool_reward_a_token_account: accounts.pool_reward_a_token_account.key(),
                user_reward_b_token_account: accounts.reward_b_token_account.key(),
                pool_reward_b_token_account: accounts.pool_reward_b_token_account.key(),
                clock: accounts.clock_sysvar.key(),
                rent: accounts.rent_sysvar.key(),
                token_program_id: accounts.token_program_id.key(),
                user_balance_metadata: accounts.chamber_balance_metadata.key(),
            }),
            accounts.lending_market.key(),
            accounts.chamber_farm_obligation.key(),
            accounts.lending_market_authority.key(),
            accounts.lending_program.key(),
            nonce,
            meta_nonce,
            obligation_index as u64,
        )
        .unwrap(),
        &Box::new(vec![
            accounts.chamber_authority.to_account_info(),
            accounts.chamber_farm.to_account_info(),
            accounts.chamber_farm_obligation_vault.to_account_info(),
            accounts.leveraged_farm.to_account_info(),
            accounts.vault_program.to_account_info(),
            accounts.authority_token_account.to_account_info(),
            accounts.vault_pda_account.to_account_info(),
            accounts.vault.to_account_info(),
            accounts.lp_token_account.to_account_info(),
            accounts.chamber_balance_account.to_account_info(),
            accounts.system_program.to_account_info(),
            accounts.stake_program.to_account_info(),
            accounts.pool_id.to_account_info(),
            accounts.pool_authority.to_account_info(),
            accounts.vault_info_account.to_account_info(),
            accounts.pool_lp_token_account.to_account_info(),
            accounts.reward_a_token_account.to_account_info(),
            accounts.pool_reward_a_token_account.to_account_info(),
            accounts.reward_b_token_account.to_account_info(),
            accounts.pool_reward_b_token_account.to_account_info(),
            accounts.clock_sysvar.to_account_info(),
            accounts.rent_sysvar.to_account_info(),
            accounts.token_program_id.to_account_info(),
            accounts.chamber_balance_metadata.to_account_info(),
            accounts.lending_market.to_account_info(),
            accounts.chamber_farm_obligation.to_account_info(),
            accounts.lending_market_authority.to_account_info(),
            accounts.lending_program.to_account_info(),
        ]),
        &[&[
            utils::CHAMBER_AUTHORITY_PREFIX.as_bytes(),
            accounts.chamber.key().as_ref(),
            &[accounts.chamber.authority_bump],
        ]],
    )?;

    Ok(())
}
